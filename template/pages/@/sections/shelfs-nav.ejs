<%
const { shuffle, autoplay } = opt
let shelfTabs
if (opt.collection_ids) {
  const collections = opt.collection_ids
  const promises = collections.map((collectionInfo) => new Promise(async (resolve) => {
    let search, title
    if (collectionInfo) {
      const [_id, resource, name] = collectionInfo.split(':')
      title = name
      if (resource === 'categories') {
        search = new _.EcomSearch().setCategoryIds([_id])
      } else if (resource === 'brands') {
        search = new _.EcomSearch().setBrandIds([_id])
      } else {
        let res
        try {
          res = await _.ecomClient.store({
            url: `/collections/${_id}.json`
          })
        } catch (err) {
          console.error(err)
        }
        if (res) {
          const collection = res.data
          const productIds = collection.products
          if (Array.isArray(productIds) && productIds.length) {
            search = new _.EcomSearch().setProductIds(productIds.slice(0, 8))
          }
          if (!title) {
            title = collection.name
          }
        }
      }
    }
    if (search) {
      if (opt.sort) {
        search.setSortOrder(opt.sort)
      }
      if (opt.limit > 0) {
        search.setPageSize(opt.limit)
      }
      if (opt.page >= 2) {
        search.setPageNumber(opt.page)
      }
      return search.fetch().then(() => {
        resolve({
          title,
          items: search.getItems()
        })
      })
    }
    resolve(null)
  }))
  shelfTabs = (await Promise.all(promises))
    .filter((result) => Boolean(result && result.items.length))
}
%>
<% if (shelfTabs && shelfTabs.length) { %>
  <div class="container">
    <div class="tf-grid-product">
      <% for (let i = 0; i < shelfTabs.length; i++) { 
        const shelf = shelfTabs[i];
        const swiperId = `swiper-wrapper-${i}`;
      %>
        <div class="tf-grid-product-item box-btn-slide-item collection-shelf" data-shelf="<%= i %>">
          <div class="flat-title wow fadeInUp animated" data-wow-delay="0s" style="visibility: visible; animation-delay: 0s; animation-name: fadeInUp;">
            <h5 class="fw-semibold"><%= shelf.title %></h5>
            <div class="box-btn-slide relative">
              <div class="swiper-button-prev nav-swiper nav-prev-products swiper-button-disabled" tabindex="-1" role="button" aria-label="Previous slide" aria-controls="<%= swiperId %>" aria-disabled="true">
                <i class="icon-arrow-left-lg"></i>
              </div>
              <div class="swiper-button-next nav-swiper nav-next-products" tabindex="0" role="button" aria-label="Next slide" aria-controls="<%= swiperId %>" aria-disabled="false">
                <i class="icon-arrow-right-lg"></i>
              </div>
            </div>
          </div>
          <div class="swiper tf-sw-products swiper-initialized swiper-horizontal swiper-backface-hidden"
            data-preview="1" data-tablet="1" data-mobile-sm="1" data-mobile="1"
            data-space-lg="20" data-space-md="20" data-space="20"
            data-pagination="1" data-pagination-sm="1" data-pagination-md="1" data-pagination-lg="1">
            <div class="swiper-wrapper" id="<%= swiperId %>" aria-live="polite">
              <% 
                const items = shelf.items;
                for (let j = 0; j < items.length; j += 3) { 
              %>
                <div class="swiper-slide product-item-horizontal <%= j === 0 ? ' swiper-slide-active' : ' swiper-slide-next' %>" role="group" aria-label="<%= (j/3)+1 %> / <%= Math.ceil(items.length/3) %>" style="width: 350px; margin-right: 20px;">
                  <ul class="product-list-wrap wow fadeInUp animated" data-wow-delay="0s" style="visibility: visible; animation-delay: 0s; animation-name: fadeInUp;">
                    <% for (let k = 0; k < 3; k++) { 
                      const idx = j + k;
                      if (!items[idx]) continue;
                    %>
                      <li class="product-item-horizontal-inner">
                        <%- await include('@/sections/inc/product-item', {
                          _, opt: { item: items[idx] }
                        }) %>
                      </li>
                    <% } %>
                  </ul>
                </div>
              <% } %>
            </div>
            <div class="d-flex d-lg-none sw-dot-default sw-pagination-products justify-content-center swiper-pagination-clickable swiper-pagination-bullets swiper-pagination-horizontal">
              <% for (let s = 0; s < Math.ceil(items.length/3); s++) { %>
                <span class="swiper-pagination-bullet<%= s === 0 ? ' swiper-pagination-bullet-active' : '' %>" tabindex="0" role="button" aria-label="Go to slide <%= s+1 %>" <%= s === 0 ? 'aria-current="true"' : '' %>></span>
              <% } %>
            </div>
            <span class="swiper-notification" aria-live="assertive" aria-atomic="true"></span>
          </div>
        </div>
      <% } %>
    </div>
  </div>
<% } %>
